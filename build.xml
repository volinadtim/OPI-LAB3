<?xml version="1.0" encoding="UTF-8"?>

<project name="lab3" default="build">

    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>
    </path>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${build.classes.dir}"/>
    </path>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${contrib}"/>
        </classpath>
    </taskdef>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${contrib}"/>
        </classpath>
    </taskdef>

    <target name="compile" depends="clean">
        <echo message="***** COMPILE STARTED *****"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${build.classes.dir}" classpathref="classpath" includeantruntime="false"/>
        <echo message="***** COMPILE COMPLETED *****"/>
    </target>

    <target name="build" depends="compile">
        <echo message="***** BUILD STARTED *****"/>
        <copy todir="${build.dir}">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.dir.lib}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <copy todir="${build.classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
        <jar destfile="${build.dir}/${build.jar}">
            <fileset dir="${build.classes.dir}"/>
            <manifest>
                <attribute name="Created-By" value="volin"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="${main_class}"/>
            </manifest>
        </jar>
        <war destfile="${build.dir}/${ant.project.name}.war" webxml="${build.web.xml}">
            <fileset dir="${build.dir}"/>
            <manifest>
                <attribute name="Created-By" value="volin"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="${main_class}"/>
            </manifest>
        </war>
        <echo message="***** BUILD COMPLETED *****"/>
    </target>

    <target name="clean">
        <echo message="***** CLEAN STARTED *****"/>
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
        <echo message="***** CLEAN COMPLETED *****"/>
    </target>

    <target name="test" depends="build">
        <echo message="***** TEST STARTED *****"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${junit.report.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false" encoding="utf-8">
            <classpath refid="classpath.test"/>
        </javac>
        <junit printsummary="on" haltonfailure="true" haltonerror="true">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <batchtest fork="yes" todir="${junit.report.dir}">
                <formatter type="plain"/>
                <fileset dir="${test.dir}" includes="*Test.java"/>
            </batchtest>
        </junit>
        <echo message="***** TEST COMPLETED *****"/>
    </target>

    <!-- SCP target -->
    <target name="scp" depends="build">
        <scp file="${build.dir}/${build.jar}" todir="${remote.server.dir}"
             port="${remote.server.port}" />
    </target>

    <target name="native2ascii">
        <echo message="***** NATIVE2ASCII STARTED *****"/>
        <delete dir="${native2ascii.resources}"/>
        <native2ascii src="${resources.dir}"
                      dest="${native2ascii.resources}"
                      includes="**/*.properties"/>
        <echo message="***** NATIVE2ASCII COMPLETED *****"/>
    </target>

    <!-- Music target -->
    <target name="music" depends="build">
        <sound>
            <success source="${music.success.file}"/>
            <fail source="${music.fail.file}"/>
        </sound>
        <property name="build" value="true"/>
<!--        <exec executable="play" dir="${music.dir}">-->
<!--            <arg value="${music.file}"/>-->
<!--        </exec>-->
    </target>

    <!-- XML validation target -->
    <target name="xml">
        <xmlvalidate failonerror="no" lenient="yes" warn="yes"
                     classname="org.apache.xerces.parsers.SAXParser"
                     classpath="lib/xercesImpl.jar">
            <fileset dir="${src.dir}">
                <include name="**/*.xml"/>
            </fileset>
        </xmlvalidate>
    </target>

    <!-- Documentation target -->
    <target name="doc" depends="build">
        <mkdir dir="${build.javadoc.dir}"/>
        <javadoc sourcepath="${src.dir}" destdir="${build.javadoc.dir}" classpathref="classpath">
            <fileset dir="${src.dir}" defaultexcludes="yes">
                <include name="**/*.java" />
            </fileset>
        </javadoc>
        <zip destfile="${build.dir}/javadoc.zip">
            <fileset dir="${build.javadoc.dir}"/>
        </zip>


        <!-- Generate MD5 and SHA-1 checksums -->
        <checksum algorithm="MD5" file="${build.dir}/${build.jar}" todir="${build.dir}" />
        <checksum algorithm="SHA-1" file="${build.dir}/${build.jar}" todir="${build.dir}" />


        <!-- Read MD5 checksum value from the generated .md5 file -->
        <loadfile property="checksum.md5"
                  srcFile="${build.dir}/${build.jar}.MD5">
            <filterchain>
                <striplinebreaks/>
            </filterchain>
        </loadfile>
        <loadfile property="checksum.sha1"
                  srcFile="${build.dir}/${build.jar}.SHA-1">
            <filterchain>
                <striplinebreaks/>
            </filterchain>
        </loadfile>

        <manifest file="${build.dir}/MANIFEST.MF" mode="update">
            <section name="hash">
                <attribute name="MD5" value="${checksum.md5}"></attribute>
                <attribute name="SHA-1" value="${checksum.sha1}"></attribute>
            </section>
        </manifest>

        
        <!-- Checksums for all files instead of jars -->
        <checksum algorithm="SHA-1" fileext=".sha1" format="MD5SUM" todir="${build.cache}/sha">
            <fileset dir="${build.dir}" />
        </checksum>
        <concat destfile="${build.dir}/DIGEST.sha1sum">
            <fileset dir="${build.cache}/sha" />
        </concat>
        <checksum algorithm="MD5" fileext=".md5" format="MD5SUM" todir="${build.cache}/md5">
            <fileset dir="${build.dir}" />
        </checksum>
        <concat destfile="${build.dir}/DIGEST.md5sum">
            <fileset dir="${build.cache}/md5" />
        </concat>
    </target>

    <!-- Team target -->
    <target name="team">
        <property name="svn.url" value="file:///D:/Documents/itmo/OPI/lab3-svn/repo"/>
        <property name="output.dir" value="../output"/>
        <property name="zip.file" value="${output.dir}/jar_files.zip"/>


        <exec executable="svn" outputproperty="svn_info">
            <arg value="info"/>
            <arg value="${svn.url}"/>
        </exec>
        
        <propertyregex property="revision.number" input="${svn_info}" 
                       regexp="Revision: (.*)" select="\1"/>
        <property name="rev1" value="${revision.number}"/>

        <math result="rev2">
            <op datatype="int" op="-">
                <num value="${rev1}" />
                <num value="1"/>
            </op>
        </math>

        <math result="rev3">
            <op datatype="int" op="-">
                <num value="${rev1}" />
                <num value="2"/>
            </op>
        </math>

        <math result="rev4">
            <op datatype="int" op="-">
                <num value="${rev1}" />
                <num value="3"/>
            </op>
        </math>

        <echo message="${rev2}" />
        <echo message="${rev3}" />
        <echo message="${rev4}" />

        <mkdir dir="${output.dir}"/>


        <for list="${rev2},${rev3},${rev4}" param="rev">
            <sequential>
                <var name="current_rev" unset="true" />
                <property name="current_rev" value="@{rev}" />
                
                <mkdir dir="${output.dir}/rev-${current_rev}" />

                <echo message="svn checkout ${svn.url} -r ${current_rev}" />

                <exec executable="svn" dir="${output.dir}/rev-${current_rev}">
                    <arg value="checkout"/>
                    <arg value="${svn.url}"/>
                    <arg value="-r"/>
                    <arg value="${current_rev}"/>
                </exec>

                <!-- <exec executable="ant">
                    <arg value="-version" />
                </exec> -->
                <exec executable="${env.ANT_HOME}/bin/ant" dir="${output.dir}/rev-${current_rev}/repo" />
                
            </sequential>
        </for>
        
        <zip destfile="${zip.file}">
            <fileset dir="${output.dir}/rev-${rev2}/repo/build" includes="**/*.jar" />
            <fileset dir="${output.dir}/rev-${rev3}/repo/build" includes="**/*.jar" />
            <fileset dir="${output.dir}/rev-${rev4}/repo/build" includes="**/*.jar" />
        </zip>
    </target>

    <!-- History target -->
    <target name="-history-attempt">
        <property name="last_failing_version" value="qwe" />

        <!-- Attempt to checkout -->
        <trycatch property="exception.message" reference="exception.object">
        <try>
        
            <var name="last_failing_version" unset="true"/>
            <exec executable="git" failonerror="true" outputproperty="last_failing_version">
                <arg value="rev-parse"/>
                <arg value="HEAD"/>
            </exec>

            <echo message="${last_failing_version}" />
            
            <exec executable="git" failonerror="true" errorproperty="git_error">
                <arg value="checkout"/>
                <arg value="HEAD~"/>
            </exec>

            <!-- Attempt to compile -->
            <trycatch property="exception.message" reference="exception.object">
                <try>
                    <antcall target="compile">
                        <!--                    <fail message="Compilation failed for revision ${current.revision}."/>-->
                    </antcall>
                </try>
                <catch>
                    <antcallback target="-history-attempt" return="last_failing_version" />
                </catch>
            </trycatch>
        </try>
            <catch>
                <echo message="***** CHECKOUT FAIL *****"/>
                <fail message="${git_error}"/>
            </catch>
        </trycatch>

        <!-- Success -->
    </target>

    <!-- History target -->
    <target name="history">
        <echo message="***** HISTORY STARTED *****"/>

        <trycatch property="exception.message" reference="exception.object">
            <try>
                <antcall target="compile" />
                <echo message="***** COMPILE SUCCESSES INITIALLY *****"/>
            </try>
            <catch>
                <trycatch property="exception.message" reference="exception.object">
                    <try>
                    <antcallback target="-history-attempt" return="last_failing_version" />

                    <!-- Generate diff file for modified files in the last working revision -->
                    <exec executable="git" failonerror="true" outputproperty="diff.output" errorproperty="git_error">
                        <arg value="diff"/>
                        <arg value="HEAD..${last_failing_version}"/>
                    </exec>

                    <echo message="HEAD..${last_failing_version}" />

                    <!-- Save diff output to a file -->
                    <echo file="${build.diff}">
                        ${diff.output}
                    </echo>
                    </try>
                    <catch>
                        <fail message="${git_error}" />
                    </catch>
                </trycatch>
            </catch>
        </trycatch>
    </target>

    <!-- Diff target -->
    <target name="diff">
        <!-- Check SVN status -->
        <exec executable="svn" failonerror="true" outputproperty="svn.status.output">
            <arg value="status"/>
        </exec>

        <!-- Check if there are any modified files -->
        <condition property="has.modified.files">
            <contains string="${svn.status.output}" substring="M"/>
        </condition>

        <!-- If there are modified files, check if they are in the specified classes -->
        <if>
            <isset property="has.modified.files"/>
            <then>
                <echo message="Modified files detected. Checking against specified classes..."/>

                <!-- Loop through each specified class -->
                <for list="${specified.classes}" param="class">
                    <sequential>


                        <var name="class.diff.output" unset="true" />
                        <exec executable="svn" failonerror="true" outputproperty="class.diff.output">
                            <arg value="diff"/>
                            <arg value="@{class}"/>
                        </exec>
                        
                        <!-- <echo message="Modified classes @{class}" /> -->
                        <!-- <echo message="${class.diff.output}" /> -->

                        <!-- Check if there are differences for the class -->
                        <condition property="class.has.diff">
                            <not>
                                <equals arg1="${class.diff.output}" arg2=""/>
                            </not>
                        </condition>

                        <!-- If differences exist, commit changes -->
                        <if>
                            <isset property="class.has.diff"/>
                            <then>
                                <exec executable="svn" failonerror="true">
                                    <arg value="add"/>
                                    <arg value="@{class}"/>
                                    <arg value="--force"/>
                                </exec>
                                <exec executable="svn" failonerror="true">
                                    <arg value="commit"/>
                                    <arg value="-m"/>
                                    <arg value="'Committing changes for @{class}'"/>
                                </exec>
                            </then>
                        </if>
                    </sequential>
                </for>
            </then>
            <else>
                <echo message="No modified files detected."/>
            </else>
        </if>
    </target>

    <!-- Alternative target -->
    <target name="alt" depends="clean">
        <delete dir="${alt.dir}"/>
        <mkdir dir="${alt.dir}"/>
        <copy todir="${alt.dir}">
            <fileset dir="${src.dir}"/>
        </copy>

        <move file="${alt.main.dir}/my/web/Shot.java" tofile="${alt.main.dir}/my/web/Crack.java"/>
        <replaceregexp match="Shot" replace="Crack" flags="g">
            <fileset dir="${alt.dir}">
                <include name="**/*"/>
            </fileset>
        </replaceregexp>
        <move file="${alt.main.dir}/my/web/Rifle.java" tofile="${alt.main.dir}/my/web/Shotgun.java"/>
        <replaceregexp match="Rifle" replace="Shotgun" flags="g">
            <fileset dir="${alt.dir}">
                <include name="**/*"/>
            </fileset>
        </replaceregexp>
        <replaceregexp match="message" replace="msgs" flags="g">
            <fileset dir="${alt.dir}">
                <include name="**/*"/>
            </fileset>
        </replaceregexp>

        <echo message="***** COMPILE STARTED *****"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${alt.dir}" destdir="${build.classes.dir}" classpathref="classpath" includeantruntime="false"/>
        <echo message="***** COMPILE COMPLETED *****"/>


        <jar destfile="${build.dir}/${build.jar}">
            <fileset dir="${build.classes.dir}"/>
            <manifest>
                <attribute name="Created-By" value="volin"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="${main_class}"/>
            </manifest>
        </jar>
    </target>

</project>